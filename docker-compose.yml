networks:
  backend:
    name: backend

x-env-aspnet: &env-aspnet
  ZuneNetContext__ConnectionString: ${ZuneNetContext__ConnectionString}
  ZuneNetContext__DatabaseName: ${ZuneNetContext__DatabaseName}

services:
  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - backend

  traefik:
    image: traefik:v3.3
    command: --api.insecure=true --providers.docker=true
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend

  catalog:
    build:
      context: ./
      dockerfile: Zune.Net.Catalog/Dockerfile
    depends_on:
      - mongodb
      - traefik
    networks:
      - backend
    ports:
      - "8070:8080"
    labels:
      - "traefik.http.routers.catalog.rule=HostRegexp(`^catalog\\..+`)"
    environment:
      << : [*env-aspnet]

  catalog-image:
    build:
      context: ./
      dockerfile: Zune.Net.Catalog.Image/Dockerfile
    depends_on:
      - mongodb
      - traefik
    networks:
      - backend
    ports:
      - "8071:8080"
    labels:
      - "traefik.http.routers.catalog-image.rule=HostRegexp(`^image\\.catalog\\..+`)"
    environment:
      << : [*env-aspnet]

  commerce:
    build:
      context: ./
      dockerfile: Zune.Net.Commerce/Dockerfile
    depends_on:
      - mongodb
      - traefik
    networks:
      - backend
    ports:
      - "8072:8080"
    labels:
      - "traefik.http.routers.commerce.rule=HostRegexp(`^commerce\\..+`)"
    environment:
      << : [*env-aspnet]

  inbox:
    build:
      context: ./
      dockerfile: Zune.Net.Inbox/Dockerfile
    depends_on:
      - mongodb
      - traefik
    networks:
      - backend
    ports:
      - "8073:8080"
    labels:
      - "traefik.http.routers.inbox.rule=HostRegexp(`^inbox\\..+`)"
    environment:
      << : [*env-aspnet]

  login:
    build:
      context: ./
      dockerfile: Zune.Net.Login/Dockerfile
    depends_on:
      - mongodb
      - traefik
    networks:
      - backend
    ports:
      - "8074:8080"
    labels:
      - "traefik.http.routers.login.rule=HostRegexp(`^login\\..+`)"
    environment:
      << : [*env-aspnet]

  metaservices:
    build:
      context: ./
      dockerfile: Zune.Net.MetaServices/Dockerfile
    depends_on:
      - mongodb
      - traefik
    networks:
      - backend
    ports:
      - "8075:8080"
    labels:
      - "traefik.http.routers.metaservices.rule=HostRegexp(`^metaservices\\..+`)"
    environment:
      << : [*env-aspnet]

  mix:
    build:
      context: ./
      dockerfile: Zune.Net.Mix/Dockerfile
    depends_on:
      - mongodb
      - traefik
    networks:
      - backend
    ports:
      - "8076:8080"
    labels:
      - "traefik.http.routers.mix.rule=HostRegexp(`^mix\\..+`)"
    environment:
      << : [*env-aspnet]

  social:
    build:
      context: ./
      dockerfile: Zune.Net.SocialApi/Dockerfile
    depends_on:
      - mongodb
      - traefik
    networks:
      - backend
    ports:
      - "8077:8080"
    labels:
      - "traefik.http.routers.socialapi.rule=HostRegexp(`^socialapi\\..+`)"
    environment:
      << : [*env-aspnet]

  tiles:
    build:
      context: ./
      dockerfile: Zune.Net.Tiles/Dockerfile
    depends_on:
      - mongodb
      - traefik
    networks:
      - backend
    ports:
      - "8078:8080"
    labels:
      - "traefik.http.routers.tiles.rule=HostRegexp(`^tiles\\..+`)"
    environment:
      << : [*env-aspnet]

  tuners:
    build:
      context: ./
      dockerfile: Zune.Net.Tuners/Dockerfile
    depends_on:
      - mongodb
      - traefik
    networks:
      - backend
    ports:
      - "8079:8080"
    labels:
      - "traefik.http.routers.tuners.rule=HostRegexp(`^tuners\\..+`)"
    environment:
      << : [*env-aspnet]

volumes:
  mongodb_data_container: